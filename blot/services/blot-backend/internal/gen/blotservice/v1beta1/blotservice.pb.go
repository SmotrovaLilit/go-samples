// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: blotservice/v1beta1/blotservice.proto

package blotservicepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RoundStatus int32

const (
	RoundStatus_ROUND_STATUS_UNSPECIFIED RoundStatus = 0
	RoundStatus_ROUND_STATUS_STARTED     RoundStatus = 1
	RoundStatus_ROUND_STATUS_FINISHED    RoundStatus = 2
)

// Enum value maps for RoundStatus.
var (
	RoundStatus_name = map[int32]string{
		0: "ROUND_STATUS_UNSPECIFIED",
		1: "ROUND_STATUS_STARTED",
		2: "ROUND_STATUS_FINISHED",
	}
	RoundStatus_value = map[string]int32{
		"ROUND_STATUS_UNSPECIFIED": 0,
		"ROUND_STATUS_STARTED":     1,
		"ROUND_STATUS_FINISHED":    2,
	}
)

func (x RoundStatus) Enum() *RoundStatus {
	p := new(RoundStatus)
	*p = x
	return p
}

func (x RoundStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoundStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_blotservice_v1beta1_blotservice_proto_enumTypes[0].Descriptor()
}

func (RoundStatus) Type() protoreflect.EnumType {
	return &file_blotservice_v1beta1_blotservice_proto_enumTypes[0]
}

func (x RoundStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoundStatus.Descriptor instead.
func (RoundStatus) EnumDescriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{0}
}

type GameStatus int32

const (
	GameStatus_GAME_STATUS_UNSPECIFIED GameStatus = 0
	GameStatus_GAME_STATUS_CREATED     GameStatus = 1
	GameStatus_GAME_STATUS_STARTED     GameStatus = 2
	GameStatus_GAME_STATUS_TALKING     GameStatus = 3
	GameStatus_GAME_STATUS_BET_PLACED  GameStatus = 4
	GameStatus_GAME_STATUS_FINISHED    GameStatus = 5
)

// Enum value maps for GameStatus.
var (
	GameStatus_name = map[int32]string{
		0: "GAME_STATUS_UNSPECIFIED",
		1: "GAME_STATUS_CREATED",
		2: "GAME_STATUS_STARTED",
		3: "GAME_STATUS_TALKING",
		4: "GAME_STATUS_BET_PLACED",
		5: "GAME_STATUS_FINISHED",
	}
	GameStatus_value = map[string]int32{
		"GAME_STATUS_UNSPECIFIED": 0,
		"GAME_STATUS_CREATED":     1,
		"GAME_STATUS_STARTED":     2,
		"GAME_STATUS_TALKING":     3,
		"GAME_STATUS_BET_PLACED":  4,
		"GAME_STATUS_FINISHED":    5,
	}
)

func (x GameStatus) Enum() *GameStatus {
	p := new(GameStatus)
	*p = x
	return p
}

func (x GameStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_blotservice_v1beta1_blotservice_proto_enumTypes[1].Descriptor()
}

func (GameStatus) Type() protoreflect.EnumType {
	return &file_blotservice_v1beta1_blotservice_proto_enumTypes[1]
}

func (x GameStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameStatus.Descriptor instead.
func (GameStatus) EnumDescriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{1}
}

type Rank int32

const (
	Rank_RANK_UNSPECIFIED Rank = 0
	Rank_RANK_ACE         Rank = 1
	Rank_RANK_SEVEN       Rank = 2
	Rank_RANK_EIGHT       Rank = 3
	Rank_RANK_NINE        Rank = 4
	Rank_RANK_TEN         Rank = 5
	Rank_RANK_JACK        Rank = 6
	Rank_RANK_QUEEN       Rank = 7
	Rank_RANK_KING        Rank = 8
)

// Enum value maps for Rank.
var (
	Rank_name = map[int32]string{
		0: "RANK_UNSPECIFIED",
		1: "RANK_ACE",
		2: "RANK_SEVEN",
		3: "RANK_EIGHT",
		4: "RANK_NINE",
		5: "RANK_TEN",
		6: "RANK_JACK",
		7: "RANK_QUEEN",
		8: "RANK_KING",
	}
	Rank_value = map[string]int32{
		"RANK_UNSPECIFIED": 0,
		"RANK_ACE":         1,
		"RANK_SEVEN":       2,
		"RANK_EIGHT":       3,
		"RANK_NINE":        4,
		"RANK_TEN":         5,
		"RANK_JACK":        6,
		"RANK_QUEEN":       7,
		"RANK_KING":        8,
	}
)

func (x Rank) Enum() *Rank {
	p := new(Rank)
	*p = x
	return p
}

func (x Rank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rank) Descriptor() protoreflect.EnumDescriptor {
	return file_blotservice_v1beta1_blotservice_proto_enumTypes[2].Descriptor()
}

func (Rank) Type() protoreflect.EnumType {
	return &file_blotservice_v1beta1_blotservice_proto_enumTypes[2]
}

func (x Rank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rank.Descriptor instead.
func (Rank) EnumDescriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{2}
}

type Suit int32

const (
	Suit_SUIT_UNSPECIFIED Suit = 0
	Suit_SUIT_HEARTS      Suit = 1
	Suit_SUIT_DIAMONDS    Suit = 2
	Suit_SUIT_CLUBS       Suit = 3
	Suit_SUIT_SPADES      Suit = 4
)

// Enum value maps for Suit.
var (
	Suit_name = map[int32]string{
		0: "SUIT_UNSPECIFIED",
		1: "SUIT_HEARTS",
		2: "SUIT_DIAMONDS",
		3: "SUIT_CLUBS",
		4: "SUIT_SPADES",
	}
	Suit_value = map[string]int32{
		"SUIT_UNSPECIFIED": 0,
		"SUIT_HEARTS":      1,
		"SUIT_DIAMONDS":    2,
		"SUIT_CLUBS":       3,
		"SUIT_SPADES":      4,
	}
)

func (x Suit) Enum() *Suit {
	p := new(Suit)
	*p = x
	return p
}

func (x Suit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Suit) Descriptor() protoreflect.EnumDescriptor {
	return file_blotservice_v1beta1_blotservice_proto_enumTypes[3].Descriptor()
}

func (Suit) Type() protoreflect.EnumType {
	return &file_blotservice_v1beta1_blotservice_proto_enumTypes[3]
}

func (x Suit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Suit.Descriptor instead.
func (Suit) EnumDescriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{3}
}

type GetGameForPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId   string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *GetGameForPlayerRequest) Reset() {
	*x = GetGameForPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameForPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameForPlayerRequest) ProtoMessage() {}

func (x *GetGameForPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameForPlayerRequest.ProtoReflect.Descriptor instead.
func (*GetGameForPlayerRequest) Descriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{0}
}

func (x *GetGameForPlayerRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GetGameForPlayerRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type GetGameForPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Game *Game `protobuf:"bytes,1,opt,name=game,proto3" json:"game,omitempty"`
}

func (x *GetGameForPlayerResponse) Reset() {
	*x = GetGameForPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameForPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameForPlayerResponse) ProtoMessage() {}

func (x *GetGameForPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameForPlayerResponse.ProtoReflect.Descriptor instead.
func (*GetGameForPlayerResponse) Descriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{1}
}

func (x *GetGameForPlayerResponse) GetGame() *Game {
	if x != nil {
		return x.Game
	}
	return nil
}

type Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status  GameStatus `protobuf:"varint,2,opt,name=status,proto3,enum=blotservice.v1beta1.GameStatus" json:"status,omitempty"`
	Players []*Player  `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
	Rounds  *Round     `protobuf:"bytes,5,opt,name=rounds,proto3" json:"rounds,omitempty"`
	Bet     *Bet       `protobuf:"bytes,6,opt,name=bet,proto3" json:"bet,omitempty"`
	Teams   []*Team    `protobuf:"bytes,7,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *Game) Reset() {
	*x = Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{2}
}

func (x *Game) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Game) GetStatus() GameStatus {
	if x != nil {
		return x.Status
	}
	return GameStatus_GAME_STATUS_UNSPECIFIED
}

func (x *Game) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Game) GetRounds() *Round {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *Game) GetBet() *Bet {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *Game) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trump  Suit   `protobuf:"varint,1,opt,name=trump,proto3,enum=blotservice.v1beta1.Suit" json:"trump,omitempty"`
	TeamId string `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *Bet) Reset() {
	*x = Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bet) ProtoMessage() {}

func (x *Bet) ProtoReflect() protoreflect.Message {
	mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bet.ProtoReflect.Descriptor instead.
func (*Bet) Descriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{3}
}

func (x *Bet) GetTrump() Suit {
	if x != nil {
		return x.Trump
	}
	return Suit_SUIT_UNSPECIFIED
}

func (x *Bet) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{4}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	HandCards    []*Card `protobuf:"bytes,4,rep,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"`
	DiscardStack []*Card `protobuf:"bytes,5,rep,name=discard_stack,json=discardStack,proto3" json:"discard_stack,omitempty"`
	TeamId       string  `protobuf:"bytes,6,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{5}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetHandCards() []*Card {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *Player) GetDiscardStack() []*Card {
	if x != nil {
		return x.DiscardStack
	}
	return nil
}

func (x *Player) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type Round struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number          int32         `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	TableCards      []*PlayerCard `protobuf:"bytes,2,rep,name=table_cards,json=tableCards,proto3" json:"table_cards,omitempty"`
	Status          RoundStatus   `protobuf:"varint,3,opt,name=status,proto3,enum=blotservice.v1beta1.RoundStatus" json:"status,omitempty"`
	CurrentPlayerId string        `protobuf:"bytes,4,opt,name=current_player_id,json=currentPlayerId,proto3" json:"current_player_id,omitempty"`
}

func (x *Round) Reset() {
	*x = Round{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Round) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round) ProtoMessage() {}

func (x *Round) ProtoReflect() protoreflect.Message {
	mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round.ProtoReflect.Descriptor instead.
func (*Round) Descriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{6}
}

func (x *Round) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Round) GetTableCards() []*PlayerCard {
	if x != nil {
		return x.TableCards
	}
	return nil
}

func (x *Round) GetStatus() RoundStatus {
	if x != nil {
		return x.Status
	}
	return RoundStatus_ROUND_STATUS_UNSPECIFIED
}

func (x *Round) GetCurrentPlayerId() string {
	if x != nil {
		return x.CurrentPlayerId
	}
	return ""
}

type PlayerCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Card     *Card  `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *PlayerCard) Reset() {
	*x = PlayerCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerCard) ProtoMessage() {}

func (x *PlayerCard) ProtoReflect() protoreflect.Message {
	mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerCard.ProtoReflect.Descriptor instead.
func (*PlayerCard) Descriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{7}
}

func (x *PlayerCard) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerCard) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank Rank `protobuf:"varint,1,opt,name=rank,proto3,enum=blotservice.v1beta1.Rank" json:"rank,omitempty"`
	Suit Suit `protobuf:"varint,2,opt,name=suit,proto3,enum=blotservice.v1beta1.Suit" json:"suit,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_blotservice_v1beta1_blotservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_blotservice_v1beta1_blotservice_proto_rawDescGZIP(), []int{8}
}

func (x *Card) GetRank() Rank {
	if x != nil {
		return x.Rank
	}
	return Rank_RANK_UNSPECIFIED
}

func (x *Card) GetSuit() Suit {
	if x != nil {
		return x.Suit
	}
	return Suit_SUIT_UNSPECIFIED
}

var File_blotservice_v1beta1_blotservice_proto protoreflect.FileDescriptor

var file_blotservice_v1beta1_blotservice_proto_rawDesc = []byte{
	0x0a, 0x25, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x22, 0x4f, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x04, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c,
	0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x03, 0x62, 0x65,
	0x74, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x22, 0x4f, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x72, 0x75,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53,
	0x75, 0x69, 0x74, 0x52, 0x05, 0x74, 0x72, 0x75, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xbf, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x68,
	0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x22, 0xc7, 0x01, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x64, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x6c,
	0x6f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x04,
	0x73, 0x75, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x6f,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x53, 0x75, 0x69, 0x74, 0x52, 0x04, 0x73, 0x75, 0x69, 0x74, 0x2a, 0x60, 0x0a, 0x0b, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xaa, 0x01,
	0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x95, 0x01, 0x0a, 0x04, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x4e, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54,
	0x45, 0x4e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4a, 0x41, 0x43,
	0x4b, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x51, 0x55, 0x45, 0x45,
	0x4e, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x47,
	0x10, 0x08, 0x2a, 0x61, 0x0a, 0x04, 0x53, 0x75, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55,
	0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x53, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e,
	0x44, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x43, 0x4c, 0x55,
	0x42, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x50, 0x41,
	0x44, 0x45, 0x53, 0x10, 0x04, 0x32, 0x7e, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x23, 0x5a, 0x21, 0x62, 0x6c, 0x6f, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x62, 0x6c, 0x6f,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_blotservice_v1beta1_blotservice_proto_rawDescOnce sync.Once
	file_blotservice_v1beta1_blotservice_proto_rawDescData = file_blotservice_v1beta1_blotservice_proto_rawDesc
)

func file_blotservice_v1beta1_blotservice_proto_rawDescGZIP() []byte {
	file_blotservice_v1beta1_blotservice_proto_rawDescOnce.Do(func() {
		file_blotservice_v1beta1_blotservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_blotservice_v1beta1_blotservice_proto_rawDescData)
	})
	return file_blotservice_v1beta1_blotservice_proto_rawDescData
}

var file_blotservice_v1beta1_blotservice_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_blotservice_v1beta1_blotservice_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_blotservice_v1beta1_blotservice_proto_goTypes = []any{
	(RoundStatus)(0),                 // 0: blotservice.v1beta1.RoundStatus
	(GameStatus)(0),                  // 1: blotservice.v1beta1.GameStatus
	(Rank)(0),                        // 2: blotservice.v1beta1.Rank
	(Suit)(0),                        // 3: blotservice.v1beta1.Suit
	(*GetGameForPlayerRequest)(nil),  // 4: blotservice.v1beta1.GetGameForPlayerRequest
	(*GetGameForPlayerResponse)(nil), // 5: blotservice.v1beta1.GetGameForPlayerResponse
	(*Game)(nil),                     // 6: blotservice.v1beta1.Game
	(*Bet)(nil),                      // 7: blotservice.v1beta1.Bet
	(*Team)(nil),                     // 8: blotservice.v1beta1.Team
	(*Player)(nil),                   // 9: blotservice.v1beta1.Player
	(*Round)(nil),                    // 10: blotservice.v1beta1.Round
	(*PlayerCard)(nil),               // 11: blotservice.v1beta1.PlayerCard
	(*Card)(nil),                     // 12: blotservice.v1beta1.Card
}
var file_blotservice_v1beta1_blotservice_proto_depIdxs = []int32{
	6,  // 0: blotservice.v1beta1.GetGameForPlayerResponse.game:type_name -> blotservice.v1beta1.Game
	1,  // 1: blotservice.v1beta1.Game.status:type_name -> blotservice.v1beta1.GameStatus
	9,  // 2: blotservice.v1beta1.Game.players:type_name -> blotservice.v1beta1.Player
	10, // 3: blotservice.v1beta1.Game.rounds:type_name -> blotservice.v1beta1.Round
	7,  // 4: blotservice.v1beta1.Game.bet:type_name -> blotservice.v1beta1.Bet
	8,  // 5: blotservice.v1beta1.Game.teams:type_name -> blotservice.v1beta1.Team
	3,  // 6: blotservice.v1beta1.Bet.trump:type_name -> blotservice.v1beta1.Suit
	12, // 7: blotservice.v1beta1.Player.hand_cards:type_name -> blotservice.v1beta1.Card
	12, // 8: blotservice.v1beta1.Player.discard_stack:type_name -> blotservice.v1beta1.Card
	11, // 9: blotservice.v1beta1.Round.table_cards:type_name -> blotservice.v1beta1.PlayerCard
	0,  // 10: blotservice.v1beta1.Round.status:type_name -> blotservice.v1beta1.RoundStatus
	12, // 11: blotservice.v1beta1.PlayerCard.card:type_name -> blotservice.v1beta1.Card
	2,  // 12: blotservice.v1beta1.Card.rank:type_name -> blotservice.v1beta1.Rank
	3,  // 13: blotservice.v1beta1.Card.suit:type_name -> blotservice.v1beta1.Suit
	4,  // 14: blotservice.v1beta1.BlotService.GetGameForPlayer:input_type -> blotservice.v1beta1.GetGameForPlayerRequest
	5,  // 15: blotservice.v1beta1.BlotService.GetGameForPlayer:output_type -> blotservice.v1beta1.GetGameForPlayerResponse
	15, // [15:16] is the sub-list for method output_type
	14, // [14:15] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_blotservice_v1beta1_blotservice_proto_init() }
func file_blotservice_v1beta1_blotservice_proto_init() {
	if File_blotservice_v1beta1_blotservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blotservice_v1beta1_blotservice_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetGameForPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blotservice_v1beta1_blotservice_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetGameForPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blotservice_v1beta1_blotservice_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blotservice_v1beta1_blotservice_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blotservice_v1beta1_blotservice_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blotservice_v1beta1_blotservice_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blotservice_v1beta1_blotservice_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Round); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blotservice_v1beta1_blotservice_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blotservice_v1beta1_blotservice_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blotservice_v1beta1_blotservice_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blotservice_v1beta1_blotservice_proto_goTypes,
		DependencyIndexes: file_blotservice_v1beta1_blotservice_proto_depIdxs,
		EnumInfos:         file_blotservice_v1beta1_blotservice_proto_enumTypes,
		MessageInfos:      file_blotservice_v1beta1_blotservice_proto_msgTypes,
	}.Build()
	File_blotservice_v1beta1_blotservice_proto = out.File
	file_blotservice_v1beta1_blotservice_proto_rawDesc = nil
	file_blotservice_v1beta1_blotservice_proto_goTypes = nil
	file_blotservice_v1beta1_blotservice_proto_depIdxs = nil
}
